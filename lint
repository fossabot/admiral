cli/inventory.go:9:1: cognitive complexity 54 of func `GenInventory` is high (> 30) (gocognit)
func GenInventory() ([]byte, error) {
^
cli/db_test.go:189:1: cognitive complexity 34 of func `(dbMock).insertHost` is high (> 30) (gocognit)
func (d dbMock) insertHost(host datastructs.Host) (affected int64, err error) {
^
cli/db_test.go:144:19: string `host1` has 4 occurrences, make it a constant (goconst)
	case hostname == "host1" || ip == "1.1.1.1" || id == 1:
	                 ^
cli/inventory_test.go:8: line is 266 characters (lll)
var inv = `{"_meta":{"hostvars":{"host1.local":{"var1":"val1"},"host2.local":{"var2":"val2"}}},"group1":{"hosts":["host1.local"],"vars":{"var1":"val1"}},"group2":{"children":["group1"],"vars":{"var2":"val2"}},"group3":{"children":["group2"],"vars":{"var3":"val3"}}}`
cli/childgroup_test.go:17:2: assignments should only be cuddled with other assignments (wsl)
	tests := []struct {
	^
cli/childgroup_test.go:63:2: only one cuddle assignment allowed before range statement (wsl)
	for _, tt := range tests {
	^
cli/childgroup_test.go:78:2: assignments should only be cuddled with other assignments (wsl)
	tests := []struct {
	^
cli/childgroup_test.go:103:2: only one cuddle assignment allowed before range statement (wsl)
	for _, tt := range tests {
	^
cli/childgroup_test.go:123:2: assignments should only be cuddled with other assignments (wsl)
	tests := []struct {
	^
cli/childgroup_test.go:148:2: only one cuddle assignment allowed before range statement (wsl)
	for _, tt := range tests {
	^
database/internal/db/database.go:105: line is 139 characters (lll)
		err = db.Conn.Get(&returnedHost, "SELECT id, host, hostname, domain, variables, enabled, monitored FROM host WHERE hostname=?", hostname)
database/internal/db/database.go:114: line is 130 characters (lll)
		err := db.Conn.Get(&returnedHost, "SELECT id, host, hostname, domain, variables, enabled, monitored FROM host WHERE host=?", ip)
database/internal/db/database.go:123: line is 128 characters (lll)
		err := db.Conn.Get(&returnedHost, "SELECT id, host, hostname, domain, variables, enabled, monitored FROM host WHERE id=?", id)
database/internal/db/database.go:147: line is 135 characters (lll)
		if err = rows.Scan(&host.ID, &host.Host, &host.Hostname, &host.Domain, &host.Variables, &host.Enabled, &host.Monitored); err != nil {
database/internal/db/database.go:162: line is 161 characters (lll)
	res, err := db.Conn.Exec(sql, host.Host, host.Hostname, host.Domain, host.Variables, host.Enabled, host.Monitored, host.Variables, host.Enabled, host.Monitored)
database/internal/db/database.go:236: line is 144 characters (lll)
	sql := "INSERT INTO `group` (name, variables, enabled, monitored) VALUES (?,?,?,?) ON DUPLICATE KEY UPDATE variables=?, enabled=?, monitored=?"
database/internal/db/database.go:238: line is 140 characters (lll)
	res, err := db.Conn.Exec(sql, group.Name, group.Variables, group.Enabled, group.Monitored, group.Variables, group.Enabled, group.Monitored)
database/internal/db/database.go:346: line is 122 characters (lll)
	res, err := db.Conn.Exec("DELETE FROM childgroups WHERE child_id=? and parent_id=?", childGroup.Child, childGroup.Parent)
database/internal/db/database.go:89:31: unnecessary conversion (unconvert)
		_, err = db.Conn.Exec(string(query))
		                            ^
database/internal/db/database.go:138:28: rows.Err must be checked (rowserrcheck)
	rows, err := db.Conn.Query("SELECT id, host, hostname, domain, variables, enabled, monitored FROM host")
	                          ^
database/internal/db/database.go:215:28: rows.Err must be checked (rowserrcheck)
	rows, err := db.Conn.Query("SELECT id, name, variables, enabled, monitored FROM `group`")
	                          ^
database/internal/db/database.go:269:29: rows.Err must be checked (rowserrcheck)
		rows, err := db.Conn.Query("SELECT id, parent_id, child_id FROM childgroups WHERE child_id=?", child)
		                          ^
cmd/childgroup.go:196:18: string ` | ` has 4 occurrences, make it a constant (goconst)
	tbl.Separator = " | "
	                ^
