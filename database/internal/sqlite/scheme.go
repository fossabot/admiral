// Code generated for package sqlite by go-bindata DO NOT EDIT. (@generated)
// sources:
// scheme.sql
package sqlite

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemeSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x8f\xa3\x46\x10\x3d\x9b\x5f\x51\xda\xcb\x80\xe4\x45\x6b\x47\x2b\x25\x5a\xf9\xc0\xe0\xf6\x86\xc4\x03\x13\x3e\x76\x33\x27\xc3\xda\x0c\xb4\x62\xe3\x11\x66\x9c\x44\x51\xfe\x7b\xd4\x0d\xfd\x05\x8d\x6d\x4d\x4e\x7b\xb3\xe9\x57\x8f\xea\x7a\xf5\xaa\x70\x43\xe4\xc4\x08\x62\xe7\x7e\x8d\xc0\x5b\x81\x1f\xc4\x80\x7e\xf7\xa2\x38\x82\xb4\xa8\x8f\xaf\x2f\x29\x98\x06\x40\x8a\x77\x29\xe0\xaa\xc9\x8b\xbc\xa6\x18\x3f\x59\xaf\xe1\x31\xf4\x1e\x9c\xf0\x09\x7e\x45\x4f\xe0\x24\x71\xe0\xf9\x6e\x88\x1e\x90\x1f\x4f\x49\x48\x95\x1d\xf2\x14\xce\x59\xbd\x2d\xb3\xda\x9c\x7f\xfc\x68\xf1\x48\x7a\x7e\xce\x6a\x9c\x7d\xdb\xe7\x27\x01\xfa\x71\xf6\xd3\x5c\xa0\x60\x89\x56\x4e\xb2\x8e\xe1\xee\x9f\x7f\xef\x68\x48\x5e\x91\x80\x5d\x0a\x0d\xae\xfe\xc6\x55\x63\xce\x74\xe8\x0f\x2d\xf8\x70\xac\x70\x73\xac\x6f\x82\xbf\x7f\x0f\x00\xe9\xb6\xce\xb3\x86\xe0\x63\xef\x01\x45\xb1\xf3\xf0\x38\x84\xbb\x49\x18\x22\x3f\xde\x70\x08\x0b\x7e\x7d\xd9\xf5\x83\x03\x1f\x92\xc7\x25\xa9\xaf\x26\x0a\x20\xf1\xbd\xdf\x12\x04\x66\x5b\x29\xcb\xb0\x3e\x19\xc6\x25\x3d\xb6\x25\xde\xef\xa8\x28\xa7\xb7\xab\x42\x49\x36\xba\x40\x7a\xfc\x92\xd5\x79\xd5\x8c\x9e\xf3\x94\x39\xcd\x54\x0a\xb1\x08\xc4\x0d\xfc\x28\x0e\x1d\xcf\x8f\x95\x8c\x37\xf8\xdb\xf3\x1f\x9b\x79\x0a\xab\x20\x44\xde\x67\x9f\xa6\x67\xca\xc1\x10\xa2\x15\x0a\x91\xef\x22\xa9\xf7\xd2\x9b\x68\x7f\xe8\xd3\xf2\xf4\x2e\xb0\x12\x79\x96\x68\x8d\x88\x3c\x4e\xe4\x3a\x4b\x74\x55\x81\xf2\x78\x6a\x34\xa5\xbf\xb5\xf6\x6d\xf8\xb8\x23\xc8\xf9\x35\xd7\xec\x8e\x87\x0c\x57\x32\xe2\x83\xc5\x9b\x53\xe7\xad\xfd\xb1\x2a\x9a\xfc\xaf\xe6\x8d\xb6\xfa\xce\xac\x44\x4b\x6c\x0d\x1e\xdd\xe8\x30\x02\xfd\xbf\x06\x23\x1c\xe3\xfe\xa2\xec\xd7\xed\xc5\x48\xe8\x4d\xd4\xd6\xe6\x47\x4a\x67\x77\x9d\x39\xd2\xd8\x43\x16\x9e\xc7\x9b\x0d\xf2\xc5\x43\x5f\x47\xeb\xb7\x39\xe3\xfc\xcf\x14\x9c\xc8\x88\xd0\x1a\xb9\xb1\x01\x00\x4a\x79\x6d\x5a\x5a\x27\x82\xb4\xce\xf7\x59\x83\x8f\xd5\xa9\xc4\x34\xa1\xa9\xc0\xa6\xb6\x64\x09\x87\xdd\x72\xaa\x21\xe3\x45\x67\x28\x89\xa9\xbd\x93\x9d\x0a\x9a\xf6\x89\x8e\x47\xc8\xc3\x71\xe4\x9f\xb1\x0a\x83\x07\x05\x6a\xac\xd1\x2a\x86\x5f\x02\xcf\x67\x74\x94\x2d\xf0\x47\x09\x17\x22\x13\xc2\x28\xc5\xd3\x5b\xe9\xc3\xf9\xbd\x16\xbc\x22\x24\x38\x08\x97\x28\x84\xfb\xa7\xde\xe5\x2e\x8b\x23\x4f\x4d\xad\x3c\xf2\x7e\xb9\xaa\x4f\xd1\x4e\x6e\xa5\xae\xdd\xa3\x01\x82\x51\x89\x61\xcf\x20\xf4\x95\x0a\x47\xfb\xa4\x7f\xce\x18\xf8\x5c\xef\x14\x91\x53\x1e\x4a\x22\x72\x30\x26\xa4\xb4\xea\x05\xa5\x55\xb7\xe8\x65\xab\xa5\x6a\x73\xd1\x31\x89\x9d\xba\x50\x73\x96\x85\x52\xeb\x75\xdd\x47\x42\xa3\xaf\x5e\xfc\x33\x84\xc8\x4d\xc2\xc8\xfb\x82\x00\x57\x65\x5e\xe3\x26\xdf\x81\xc9\x5e\x3c\x05\x7e\x19\x8b\xd4\xc9\x64\xba\x4e\x38\xc2\x98\x70\x88\xf1\x5c\x1f\x0f\xdd\x91\xd4\x0f\xb0\x3d\x1b\x89\xef\x05\x3e\x38\xeb\xb5\x20\x38\xdb\x12\x07\xb6\x05\x0b\x51\xc0\x98\x88\x6c\xb0\x41\x0b\xa6\xa1\x85\xc0\x27\xa1\x8c\x07\x16\xb0\x3d\x0b\x22\xb0\xf8\xcb\xa4\x1e\xd7\x39\x79\x74\x26\xd0\x7f\x2a\x88\xed\x49\x02\xe9\x7e\x0f\x59\xf4\x53\x25\xb5\xc5\x46\x24\xe7\xec\x8f\x0a\x91\x76\x22\x01\x89\xbf\x2a\x4c\xda\xc4\x04\x26\xfe\xb6\x30\xfc\x5c\xbd\xee\xf7\x66\x3b\x26\xb6\xc7\x6a\x9b\x35\xe6\x0e\x9f\x1a\x5c\x6d\x1b\x48\x8b\x19\xeb\x17\x6b\xfa\xee\x9d\xd5\x5e\x06\xd7\xf9\xb6\xd9\xc8\x33\xec\x0a\xc9\x7c\x48\xc2\x55\xdb\x30\xf3\xb4\x6a\x92\xa4\xa5\xe6\x57\xe7\x39\x94\xad\x92\xe4\xa9\x4d\x65\x2c\xcf\x76\x27\x91\x14\x24\x75\x44\x0b\x3f\xdb\x6c\x0a\xc2\x02\x44\x1b\x68\x4c\x56\xcc\x34\x11\xc5\xcc\xd6\x83\xe7\x5d\x5f\x89\x4e\x5a\x40\x31\x27\xe0\xcf\x61\x90\x3c\xc2\xfd\x53\x97\x2b\x6b\x11\x6e\xc7\xde\xf3\xcb\x66\xec\x8d\x4c\x18\xf5\xa3\xfc\x55\x0c\xca\x97\xad\x6c\xc9\x76\xd4\x9e\x95\xb1\xa1\x8c\xb6\xa9\x04\x91\x66\x94\x3a\x40\x5b\xbd\xfa\x63\xbb\x4b\x92\xc4\x0e\xad\x7c\xeb\x8b\xf1\x8d\xef\xe5\xf7\x4e\x49\x4c\x6b\xfe\x91\x64\xe8\x62\xc3\xfd\x49\xd9\xbb\x21\x1b\x03\x60\x4c\xda\xc6\x1f\xac\x61\xb6\x15\x66\xca\xc6\x90\xcd\x4f\x8f\x2e\x99\x97\x02\x2e\x58\x77\xe2\x06\x89\x1f\x9b\x4b\x2f\x8a\x3d\xdf\x8d\xa1\xb4\xbb\x91\x9a\x56\xaf\x87\x0d\x69\x98\x93\x06\x25\x7b\x8c\x83\xe9\x5d\xeb\x9c\xcc\x9d\x89\xb7\x22\x9f\x78\x26\xed\xcb\x8d\x1b\xf8\xae\x33\x12\x3d\xbd\xbb\xb3\x24\x55\x3a\x77\x4e\x59\x49\x46\xa7\x49\xb7\x0f\xb9\x8f\x64\xbf\xa8\x42\x11\xd3\x80\xa8\x45\xa7\x85\x2a\xba\x76\xff\xcd\xa5\xd0\x81\x96\xf4\x0a\x6a\xa4\xf8\x90\x81\xb2\xa0\x56\x4d\xcb\x62\xf0\x49\xc4\x72\xe8\x05\x42\xd9\x45\x88\x14\x69\x30\xff\x20\xe2\x1e\x97\x39\xa4\x75\xdb\x3d\xfb\x64\xfc\x17\x00\x00\xff\xff\x75\xdd\x83\x50\xe2\x10\x00\x00")

func schemeSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemeSql,
		"scheme.sql",
	)
}

func schemeSql() (*asset, error) {
	bytes, err := schemeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scheme.sql", size: 4322, mode: os.FileMode(511), modTime: time.Unix(1606059132, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scheme.sql": schemeSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scheme.sql": &bintree{schemeSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
